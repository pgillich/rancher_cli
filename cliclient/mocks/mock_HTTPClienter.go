// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockHTTPClienter is an autogenerated mock type for the HTTPClienter type
type MockHTTPClienter struct {
	mock.Mock
}

type MockHTTPClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPClienter) EXPECT() *MockHTTPClienter_Expecter {
	return &MockHTTPClienter_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields:
func (_m *MockHTTPClienter) New() *http.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// MockHTTPClienter_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockHTTPClienter_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
func (_e *MockHTTPClienter_Expecter) New() *MockHTTPClienter_New_Call {
	return &MockHTTPClienter_New_Call{Call: _e.mock.On("New")}
}

func (_c *MockHTTPClienter_New_Call) Run(run func()) *MockHTTPClienter_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHTTPClienter_New_Call) Return(_a0 *http.Client) *MockHTTPClienter_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHTTPClienter_New_Call) RunAndReturn(run func() *http.Client) *MockHTTPClienter_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPClienter creates a new instance of MockHTTPClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPClienter {
	mock := &MockHTTPClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
